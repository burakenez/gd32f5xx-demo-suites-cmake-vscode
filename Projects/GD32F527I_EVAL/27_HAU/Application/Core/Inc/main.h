/*!
    \file    main.h
    \brief   the header of main

    \version 2024-12-27, V1.2.0, demo for GD32F5xx
*/

/*
    Copyright (c) 2024, GigaDevice Semiconductor Inc.

    Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    1. Redistributions of source code must retain the above copyright notice, this
       list of conditions and the following disclaimer.
    2. Redistributions in binary form must reproduce the above copyright notice,
       this list of conditions and the following disclaimer in the documentation
       and/or other materials provided with the distribution.
    3. Neither the name of the copyright holder nor the names of its contributors
       may be used to endorse or promote products derived from this software without
       specific prior written permission.

    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY
OF SUCH DAMAGE.
*/

#include "gd32f5xx.h"
#include "stdio.h"

#ifndef MAIN_H
#define MAIN_H

#define HASH_MODE               "HASH"
#define HMAC_MODE               "HMAC"
#define SHA1                    "SHA1"
#define SHA224                  "SHA224"
#define SHA256                  "SHA256"
#define MD5                     "MD5"

#define ALGORITHM_USE_SHA1      0x01
#define ALGORITHM_USE_SHA224    0x02
#define ALGORITHM_USE_SHA256    0x04
#define ALGORITHM_USE_MD5       0x08
#define MODE_USE_HASH           0x10
#define MODE_USE_HMAC           0x20

/* message to be hashed */
const uint8_t message_input[] = {
    0x43, 0x48, 0x4E, 0x20, 0x47, 0x69, 0x67, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53,
    0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x63,
    0x43, 0x48, 0x4E, 0x20, 0x47, 0x69, 0x67, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53,
    0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x63,
    0x43, 0x48, 0x4E, 0x20, 0x47, 0x69, 0x67, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53,
    0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x63,
    0x43, 0x48, 0x4E, 0x20, 0x47, 0x69, 0x67, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53,
    0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x63,
    0x43, 0x48, 0x4E, 0x20, 0x47, 0x69, 0x67, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53,
    0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x63,
    0x43, 0x48, 0x4E, 0x20, 0x47, 0x69, 0x67, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53,
    0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x63,
    0x43, 0x48, 0x4E, 0x20, 0x47, 0x69, 0x67, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53,
    0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x63,
    0x43, 0x48, 0x4E, 0x20, 0x47, 0x69, 0x67, 0x61, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x53,
    0x65, 0x6D, 0x69, 0x63, 0x6F, 0x6E, 0x64, 0x75, 0x63, 0x74, 0x6F, 0x72, 0x20, 0x49, 0x6E, 0x63
};

/* key for HMAC mode */
const uint8_t key[] = {
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
    0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50
};

__attribute__((aligned(32)))
const uint8_t expected_data_sha1[] = {
    0x06, 0x9B, 0x69, 0x4C,
    0x14, 0x07, 0xDE, 0x79,
    0xB7, 0x2F, 0x31, 0xD9,
    0xB6, 0xB4, 0x97, 0x84,
    0x6C, 0x24, 0x5A, 0xB0
};

__attribute__((aligned(32)))
const uint8_t expected_data_sha224[] = {
    0xD3, 0x91, 0x8F, 0x90,
    0x2E, 0xB5, 0xDC, 0x54,
    0x2D, 0xEB, 0x4A, 0x7D,
    0x48, 0x62, 0x27, 0x37,
    0x7F, 0x06, 0x24, 0x6E,
    0xBF, 0x05, 0x99, 0xF9,
    0x53, 0xF9, 0x38, 0xF7
};

__attribute__((aligned(32)))
const uint8_t expected_data_sha256[] = {
    0xC6, 0x43, 0xD7, 0x88,
    0xA2, 0x91, 0x05, 0x61,
    0xEF, 0xFC, 0xFA, 0xD8,
    0x5D, 0x95, 0xCC, 0x43,
    0x7B, 0x9E, 0x1E, 0x18,
    0x51, 0x97, 0x3A, 0x41,
    0x60, 0xDB, 0xE5, 0xFC,
    0xA1, 0x26, 0x42, 0xB5
};

__attribute__((aligned(32)))
const uint8_t expected_data_md5[] = {
    0xD7, 0x1F, 0x05, 0x0B,
    0xA0, 0xA6, 0xC3, 0x8C,
    0x13, 0x6C, 0xA0, 0x83,
    0xD2, 0xED, 0xDF, 0xAC
};

__attribute__((aligned(32)))
const uint8_t expected_data_sha1_hmac[] = {
    0x9C, 0xE1, 0x7B, 0x58,
    0x49, 0x75, 0xA2, 0x7E,
    0x22, 0xAA, 0x96, 0xD0,
    0xCB, 0x5C, 0xC8, 0x72,
    0x76, 0xB2, 0x53, 0x77
};

__attribute__((aligned(32)))
const uint8_t expected_data_sha224_hmac[] = {
    0xF1, 0xF4, 0x60, 0x53,
    0x75, 0xCC, 0x4E, 0x79,
    0xD5, 0x36, 0x63, 0x59,
    0x26, 0x36, 0xB6, 0x10,
    0x1A, 0xDE, 0xAC, 0x46,
    0x83, 0x7D, 0x9B, 0x18,
    0xB3, 0xCA, 0xBC, 0xE1
};

__attribute__((aligned(32)))
const uint8_t expected_data_sha256_hmac[] = {
    0xAA, 0xEE, 0x50, 0x1C,
    0x66, 0xCA, 0xC8, 0x6E,
    0xBF, 0xDC, 0xE4, 0x9E,
    0xA9, 0x0B, 0xB5, 0xA2,
    0x23, 0xFE, 0x01, 0xB5,
    0x09, 0xE2, 0x90, 0xB7,
    0x41, 0x72, 0x50, 0xD1,
    0x2F, 0x8E, 0x62, 0xE2
};

__attribute__((aligned(32)))
const uint8_t expected_data_md5_hmac[] = {
    0xEA, 0x23, 0x75, 0x2F,
    0xA6, 0xDF, 0xFF, 0x16,
    0x97, 0xF0, 0x7F, 0x4A,
    0x9D, 0xA0, 0x6F, 0x9D
};

#endif /* MAIN_H */
